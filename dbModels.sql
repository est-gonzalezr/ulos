-- This file contains the SQL code for creating the database tables.
-- The database schema is as follows:

-- User table: Contains the user information.
CREATE TABLE User (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email TEXT NOT NULL UNIQUE,
    assigned_role TEXT NOT NULL CHECK (assigned_role IN ('sysadmin', 'student', 'professor', 'assistant')),
    creation_timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
);

CREATE TABLE Class (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    class_name TEXT NOT NULL UNIQUE,
    creation_timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
);

-- Example
INSERT INTO Class (class_name) VALUES ('Software Engineering 202510');

CREATE TABLE Assignement (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    class_id INT NOT NULL REFERENCES Class(id),
    assignement_name TEXT NOT NULL,
    creation_timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
);

--  Example
INSERT INTO Assignement (class_id, assignement_name) VALUES (1, 'Assignment 1');
-- Here the class_id refers to "Software Engineering 202510".

-- Example
INSERT INTO User (email, assigned_role) VALUES ('e.gonzalez5@uniandes.edu.co', 'sysadmin');

-- TaskType table: Contains the task types that the system is able to process.
CREATE TABLE TaskType (
    id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    type_name TEXT NOT NULL UNIQUE,
    type_description TEXT NOT NULL UNIQUE,
    creation_timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
);

-- Example
INSERT INTO TaskType (type_name, type_description) VALUES ('CYPRESS', 'Run tests of a cypress file.');

-- ProcessingStage table: Contains the processing stages that a task can have in the database.
CREATE TABLE ProcessingStage (
    id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    stage_name TEXT NOT NULL UNIQUE,
    stage_description TEXT NOT NULL UNIQUE
);

-- Example
INSERT INTO ProcessingStage (stage_name, stage_description) VALUES ('PARSING', 'The task is downloading the file from the remote storage.');
INSERT INTO ProcessingStage (stage_name, stage_description) VALUES ('EXECUTION', 'The task is executing the processing logic on the file.');

-- ProcessingStatus table: Contains the processing statuses that a task can be found in on a certain processing stage.
CREATE TABLE ProcessingStatus (
    id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    status_name TEXT NOT NULL UNIQUE,
    status_description TEXT NOT NULL UNIQUE
);

-- Example
INSERT INTO ProcessingStatus (status_name, status_description) VALUES ('PENDING', 'The task is waiting to be processed.');
INSERT INTO ProcessingStatus (status_name, status_description) VALUES ('IN_PROGRESS', 'The task is being processed.');
INSERT INTO ProcessingStatus (status_name, status_description) VALUES ('COMPLETED', 'The task has been processed successfully.');
INSERT INTO ProcessingStatus (status_name, status_description) VALUES ('FAILED', 'The task processing has failed.');

-- Task table: Contains the tasks that the system has to process.
CREATE TABLE Task (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES User(id),
    task_type_id SMALLINT NOT NULL REFERENCES TaskType(id),
    class_id INT NOT NULL REFERENCES Class(id),
    assignement_id INT NOT NULL REFERENCES Assignement(id),
    remote_storage_path TEXT NOT NULL UNIQUE,
    creation_timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Example
INSERT INTO Task (user_id, task_type_id, class_id, assignement_id, remote_storage_path) VALUES (1, 1, 1, 1, '/files/test.zip');
-- Here the user_id refers to "e.gonzalez5@uniandes.edu.co", the task_type_id refers to "CYPRESS", the class_id refers to "Software Engineering 202510", the assignement_id refers to "Assignment 1".

-- TaskProcessingStageStatus table: Contains the processing stage status for each task.
CREATE TABLE TaskProcessingStageStatus (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    task_id BIGINT NOT NULL REFERENCES Task(id),
    processing_stage_id SMALLINT NOT NULL REFERENCES ProcessingStage(id),
    processing_status_id SMALLINT NOT NULL REFERENCES ProcessingStatus(id),
    creation_timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (task_id, processing_stage_id)
);

-- Example in queries below.

-- TaskProcessingLog table: Contains the log messages for each task.
CREATE TABLE TaskProcessingLog (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    task_id BIGINT NOT NULL REFERENCES Task(id),
    log_message TEXT,
    creation_timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Example in queries below.

-- TaskGeneralMetrics table: Contains the general metrics for each task.
CREATE TABLE TaskGeneralMetrics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    task_id BIGINT NOT NULL REFERENCES Task(id),
    requeue_count SMALLINT DEFAULT 0,
    processing_time INTERVAL,
    parsing_time INTERVAL,
    execution_time INTERVAL
);

-- Example
INSERT INTO TaskGeneralMetrics (task_id, requeue_count, processing_time, parsing_time, execution_time) VALUES (1, 0, '00:30:00', '00:05:00', '00:20:00');
-- Here the processing time can be different that the sum of parsing time and execution time.
-- This happens because there is some overhead in the processing logic that is not accounted for in the parsing and execution times.
-- For example, the time taken to enqueue, dequeue, download the file, etc.

-- Some useful queries:

-- Get the processing statuses of a task.
SELECT Task.id,
       ProcessingStage.stage_name,
       ProcessingStatus.status_name,
       TaskProcessingStageStatus.creation_timestamp
FROM Task
JOIN TaskProcessingStageStatus
    ON TaskProcessingStageStatus.task_id = Task.id
JOIN ProcessingStage
    ON ProcessingStage.id = TaskProcessingStageStatus.processing_stage_id
JOIN ProcessingStatus
    ON ProcessingStatus.id = TaskProcessingStageStatus.processing_status_id
WHERE Task.id = :task_id;

-- This will return something like:
-- | id | stage_name | status_name | creation_timestamp |

-- For example:
-- | 1 | PARSING | COMPLETED | 2021-10-01 12:00:00 |
-- | 1 | EXECUTION | IN_PROGRESS | 2021-10-01 12:05:00 |


-- Get the log messages of a task.
SELECT Task.id,
       TaskProcessingLog.log_message,
       TaskProcessingLog.creation_timestamp
FROM Task
JOIN TaskProcessingLog
    ON TaskProcessingLog.task_id = Task.id
WHERE Task.id = :task_id
ORDER BY TaskProcessingLog.creation_timestamp;

-- This will return something like:
-- | id | log_message | creation_timestamp |

-- For example:
-- | 1 | Parsing the file... | 2021-10-01 12:00:00 |
-- | 1 | Executing the processing logic... | 2021-10-01 12:05:00 |

--
