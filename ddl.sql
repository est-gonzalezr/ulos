-- This file contains the SQL code for creating the database tables.
-- The database schema is as follows:

-- sys_user table: Contains the user information.
CREATE TABLE sys_user (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email TEXT NOT NULL UNIQUE,
    assigned_role TEXT NOT NULL CHECK (assigned_role IN ('sysadmin', 'student', 'professor', 'assistant')),
    creation_timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Example
-- INSERT INTO sys_user (email, assigned_role) VALUES ('sysadmin@uniandes.edu.co', 'sysadmin');
-- INSERT INTO sys_user (email, assigned_role) VALUES ('student@uniandes.edu.co', 'student');

-- class table: Contains the classes that have been created in the system.
CREATE TABLE class (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    class_name TEXT NOT NULL UNIQUE,
    created_by INT NOT NULL REFERENCES sys_user(id),
    creation_timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Example
-- INSERT INTO class (class_name, created_by) VALUES ('IP_01_202510', 1);

-- class_user table: Contains the users that are part of a class.
CREATE TABLE class_user (
    class_id INT NOT NULL REFERENCES class(id),
    user_id INT NOT NULL REFERENCES sys_user(id),
    PRIMARY KEY (class_id, user_id)
);

-- Example
-- INSERT INTO class_user (class_id, student_id) VALUES (1, 1);
-- INSERT INTO class_user (class_id, student_id) VALUES (1, 2);

-- task_definition table: Contains the task definition that have been defined in the system.
CREATE TABLE task_definition (
    id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    type_name TEXT NOT NULL UNIQUE,
    type_description TEXT NOT NULL,
    created_by INT NOT NULL REFERENCES sys_user(id),
    creation_timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Example
-- INSERT INTO task_definition (type_name, type_description, created_by) VALUES ('IP_PROJECT_1_202510', 'Evaluate IP project 1.', 1);

-- assignment table: Contains the assignments that have been created in the system.
CREATE TABLE assignment (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    class_id INT NOT NULL REFERENCES class(id),
    task_definition_id SMALLINT NOT NULL REFERENCES task_definition(id),
    assignment_name TEXT NOT NULL,
    assignment_description TEXT NOT NULL,
    assignment_start_date TIMESTAMP WITH TIME ZONE,
    assignment_end_date TIMESTAMP WITH TIME ZONE,
    created_by INT NOT NULL REFERENCES sys_user(id),
    creation_timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Example
-- INSERT INTO assignment (class_id, task_definition_id, assignment_name, assignment_description, assignment_start_date, assignment_end_date, created_by) VALUES (1, 1, 'Project 1', 'Do IP project 1 and upload for grading.', '2021-10-01 00:00:00', '2021-10-15 23:59:59', 1);

-- task table: Contains the tasks that have been sent to the system for processing.
CREATE TABLE task (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    assignment_id INT NOT NULL REFERENCES assignment(id),
    remote_storage_path TEXT NOT NULL UNIQUE,
    created_by INT NOT NULL REFERENCES sys_user(id),
    creation_timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Example
-- INSERT INTO task (assignment_id, remote_storage_path, created_by) VALUES (1, '/task_2305925097.zip', 1);
-- INSERT INTO task (assignment_id, remote_storage_path, created_by) VALUES (1, '/task_2305925098.zip', 2);

-- processing_stage table: Contains the variety of processing stages that a task can be in.
CREATE TABLE processing_stage (
    id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    stage_name TEXT NOT NULL UNIQUE,
    stage_description TEXT NOT NULL UNIQUE
);

-- Example
-- INSERT INTO processing_stage (stage_name, stage_description) VALUES ('PARSING', 'Parsing of the task file.');
-- INSERT INTO processing_stage (stage_name, stage_description) VALUES ('EXECUTION, 'Execution of the task logic.');

-- stage_by_task_definition: Contains the processing stages that a task type can have.
CREATE TABLE stage_by_task_definition (
    task_definition_id SMALLINT NOT NULL REFERENCES task_definition(id),
    processing_stage_id SMALLINT NOT NULL REFERENCES processing_stage(id),
    UNIQUE (task_definition_id, processing_stage_id)
);

-- Example

-- INSERT INTO stage_by_task_definition (task_definition_id, processing_stage_id) VALUES (1, 1);
-- INSERT INTO stage_by_task_definition (task_definition_id, processing_stage_id) VALUES (1, 2);

-- These two inserts mean that the task type with id 1 has the processing stages with id 1 and 2
-- which will correspond to task_definition "IP_PROJECT_1_202510" having the stages "PARSING" and "EXECUTION".

-- processing_container table: Contains the processing containers uploaded to process the different tasks.
CREATE TABLE processing_container (
    id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    container_name TEXT NOT NULL UNIQUE,
    container_description TEXT NOT NULL UNIQUE,
    task_definition_id SMALLINT NOT NULL,
    processing_stage_id SMALLINT NOT NULL,
    remote_storage_path TEXT NOT NULL UNIQUE,
    run_command TEXT,
    created_by INT NOT NULL REFERENCES sys_user(id),
    creation_timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (task_definition_id, processing_stage_id) REFERENCES stage_by_task_definition(task_definition_id, processing_stage_id)
);

-- Example
-- INSERT INTO processing_container (container_name, container_description, task_definition_id, processing_stage_id, remote_storage_path, run_command, created_by) VALUES ('IP_PROJECT_1_PARSING_VALIDATION_202510', 'Container for validating the parsing of IP project 1.', 1, 1, '/container_4820589.tar.gz', NULL, 1);
-- INSERT INTO processing_container (container_name, container_description, task_definition_id, processing_stage_id, remote_storage_path, run_command, created_by) VALUES ('IP_PROJECT_1_PARSING_VALIDATION_202510', 'Container for validating the parsing of IP project 1.', 1, 2, '/container_4820590.tar.gz', NULL, 1);


-- processing_status table: Contains the processing statuses that a task can be found in on a certain processing stage.
CREATE TABLE processing_status (
    id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    status_name TEXT NOT NULL UNIQUE,
    status_description TEXT NOT NULL UNIQUE
);

-- Example
-- INSERT INTO processing_status (status_name, status_description) VALUES ('PENDING', 'The task is waiting to be processed.');
-- INSERT INTO processing_status (status_name, status_description) VALUES ('IN_PROGRESS', 'The task is being processed.');
-- INSERT INTO processing_status (status_name, status_description) VALUES ('COMPLETED', 'The task has been processed successfully.');
-- INSERT INTO processing_status (status_name, status_description) VALUES ('FAILED', 'The task processing has failed.');

-- These statues would apply to the different stages that a task can be in, for example,
-- a task can have the status "COMPLETED" in the "PARSING" stage and the status "IN_PROGRESS" in the "EXECUTION" stage.

-- task_stage_status table: Contains the processing stage status for each task.
CREATE TABLE task_stage_status (
    task_id BIGINT NOT NULL REFERENCES task(id),
    processing_stage_id SMALLINT NOT NULL REFERENCES processing_stage(id),
    processing_status_id SMALLINT NOT NULL REFERENCES processing_status(id),
    creation_timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (task_id, processing_stage_id)
);

-- Example
-- INSERT INTO task_stage_status (task_id, processing_stage_id, processing_status_id) VALUES (1, 1, 1);

-- Effectively, this would mean that each task would have as many rows in this table as processing stages the task type has
-- defined in the 'stage_by_task_definition' table.

-- task_log table: Contains the log messages for each task.
CREATE TABLE task_log (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    task_id BIGINT NOT NULL REFERENCES task(id),
    log_message TEXT NOT NULL,
    creation_timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Example
-- INSERT INTO task_log (task_id, log_message) VALUES (1, 'task has been received and is pending processing.');

-- task_metrics table: Contains the general metrics for each task.
CREATE TABLE task_metrics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    task_id BIGINT NOT NULL REFERENCES task(id),
    requeue_count SMALLINT DEFAULT 0,
    processing_time INTERVAL,
    parsing_time INTERVAL,
    execution_time INTERVAL
);
