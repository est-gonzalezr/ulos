/** @author
 *    Esteban Gonzalez Ruales
 */

//| mill-version: 1.0.0-RC1
//| mvnDeps:
//| - com.goyeau::mill-scalafix::0.5.0

package build

import mill.*
import mill.scalalib.*

val AkkaVersion = "2.10.6"

val scalaToolkit = mvn"org.scala-lang::toolkit::0.7.0"
val munit = mvn"org.scalameta::munit::1.0.1"
val scalaYaml = mvn"org.virtuslab::scala-yaml::0.3.0"
val amqpClient = mvn"com.rabbitmq:amqp-client:5.21.0"
val apacheCommonsNet = mvn"commons-net:commons-net:3.10.0"
val pekko = mvn"org.apache.pekko::pekko-actor-typed::1.1.3"
val akka = mvn"com.typesafe.akka::akka-actor-typed::$AkkaVersion"
val akkaTestKit = mvn"com.typesafe.akka::akka-actor-testkit-typed::$AkkaVersion"
val logback = mvn"ch.qos.logback:logback-classic::1.5.8"
val logbackCore = mvn"ch.qos.logback:logback-core::1.5.8"
val zioJson = mvn"dev.zio::zio-json::0.7.3"
val oshi = mvn"com.github.oshi:oshi-core:6.6.5"
val docker = mvn"com.github.docker-java:docker-java:3.4.1"

trait ProjectConfigs extends ScalaModule:
  def scalaVersion = "3.7.1"

  def scalacOptions = Seq(
    // "-Werror",
    "-Wnonunit-statement",
    "-Wshadow:all",
    "-Wvalue-discard",
    // "-Wunused:all",
    "-Wunused:unsafe-warn-patvars",
    // "-Yretain-trees",
    // "-Xsemanticdb",
    // s"-P:semanticdb:sourceroot:$millSourcePath",
    "-deprecation",
    "-explain",
    "-explain-types",
    "-new-syntax",
    "-unchecked"
  )


  def scalaDocOptions = Seq("-siteroot", "mydocs", "-no-link-warnings")
  def repositories = Seq("https://repo.akka.io/maven")
end ProjectConfigs

object cluster extends ProjectConfigs:
  // def moduleDeps = Seq(coreUtils, storageUtils)
  def mvnDeps = Seq(
    pekko,
    amqpClient,
    akka,
    akkaTestKit,
    zioJson,
    munit,
    scalaToolkit,
    logback,
    apacheCommonsNet,
    oshi,
    docker
  )

  def forkEnv = Map(
    "RABBITMQ_HOST" -> "localhost",
    "RABBITMQ_PORT" -> "5672",
    "RABBITMQ_USER" -> "guest",
    "RABBITMQ_PASS" -> "guest",
    "PRIMARY_EXCHANGE" -> "processing_exchange",
    "CONSUMPTION_QUEUE" -> "execution_testing_queue",
    "PUBLISHING_ROUTING_KEY" -> "user.notification",
    "DATABASE_ROUTING_KEY" -> "database.task.update"
  )
end cluster
